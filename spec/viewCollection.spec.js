// Generated by CoffeeScript 1.3.3
(function() {

  describe("view collection", function() {
    beforeEach(function() {
      this.collection = new Traction.ViewCollection();
      return this.view = {};
    });
    describe("adding and retrieving a member", function() {
      it("accepts a name and a view", function() {
        this.collection.add("name", this.view);
        return expect(this.collection.get("name")).toBe(this.view);
      });
      return it("generates a unique ID when a name is not present", function() {
        spyOn(_, "uniqueId").andReturn("ABC123");
        this.collection.add(this.view);
        return expect(this.collection.get("ABC123")).toBe(this.view);
      });
    });
    describe("#destroy", function() {
      var child, remove;
      remove = jasmine.createSpy();
      child = {
        remove: remove
      };
      beforeEach(function() {
        return this.collection.add(child);
      });
      it("removes each child", function() {
        this.collection.destroy();
        return expect(remove).toHaveBeenCalled();
      });
      return it("empties the collection", function() {
        this.collection.destroy();
        return expect(this.collection.map(function() {})).toEqual([]);
      });
    });
    describe("#each", function() {
      return it("passes each member to a callback", function() {
        var callback;
        callback = jasmine.createSpy();
        this.collection.add("child", this.view);
        this.collection.each(callback);
        return expect(callback).toHaveBeenCalledWith(this.view, "child");
      });
    });
    describe("#map", function() {
      beforeEach(function() {
        this.collection.add("child", this.view);
        return this.callback = jasmine.createSpy().andReturn("result");
      });
      it("calls the callback for each member", function() {
        this.collection.map(this.callback);
        return expect(this.callback).toHaveBeenCalledWith(this.view, "child");
      });
      return it("maps each member to the result of a callback", function() {
        return expect(this.collection.map(this.callback)).toEqual(["result"]);
      });
    });
    describe("#render", function() {
      beforeEach(function() {
        this.view = {};
        this.view.render = function() {
          return this;
        };
        this.view.delegateEvents = function() {
          return this;
        };
        return this.collection.add(this.view);
      });
      it("renders each member", function() {
        spyOn(this.view, "render").andCallThrough();
        this.collection.render();
        return expect(this.view.render).toHaveBeenCalled();
      });
      it("re-delegates events on each member", function() {
        spyOn(this.view, "delegateEvents");
        this.collection.render();
        return expect(this.view.delegateEvents).toHaveBeenCalled();
      });
      return it("returns itself", function() {
        return expect(this.collection.render()).toBe(this.collection);
      });
    });
    return describe("#els", function() {
      return it("maps member to its el", function() {
        var view;
        view = {
          el: "an element"
        };
        this.collection.add(view);
        return expect(this.collection.els()).toEqual(["an element"]);
      });
    });
  });

}).call(this);
