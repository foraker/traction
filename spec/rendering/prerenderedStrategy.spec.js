// Generated by CoffeeScript 1.9.3
(function() {
  describe("prerendered element rendering strategy", function() {
    var createInstance;
    createInstance = function(options) {
      if (options == null) {
        options = {};
      }
      return new Traction.Rendering.PrerenderedStrategy(options);
    };
    describe("shared behavior", function() {
      return jasmine.itShouldBehaveLike("a node rendering strategy", {
        createInstance: createInstance
      });
    });
    it("assigns its element", function() {
      var element, renderer;
      element = $("<div></div>")[0];
      renderer = createInstance({
        renderWithin: element
      });
      return expect(renderer.el).toEqual(element);
    });
    return describe("#call", function() {
      var rendererWithContent;
      rendererWithContent = function(content) {
        var element, renderer;
        element = $("<div>" + content + "</div>");
        return renderer = createInstance({
          renderWithin: element
        });
      };
      describe("bindings", function() {
        beforeEach(function() {
          this.model = {};
          this.binding = {
            bindTo: function() {
              return this;
            }
          };
          return spyOn(Traction.Bindings, "Factory").andReturn(this.binding);
        });
        it("creates bindings for data-bind attributes", function() {
          var renderer;
          renderer = rendererWithContent("<p data-bind='attribute'></p>");
          renderer.call({
            bindTo: this.model
          });
          return expect(Traction.Bindings.Factory).toHaveBeenCalledWith(renderer.$("p")[0], "attribute");
        });
        it("registers the binding", function() {
          var renderer;
          renderer = rendererWithContent("<p data-bind='attribute'></p>");
          renderer.call({
            bindTo: this.model
          });
          return expect(renderer.bindings).toEqual([this.binding]);
        });
        it("creates multiple bindings for multiple tag", function() {
          var renderer;
          renderer = rendererWithContent("<p id='first' data-bind='attribute-one'></p>\n<p id='second' data-bind='attribute-two'></p>");
          renderer.call({
            bindTo: this.model
          });
          expect(Traction.Bindings.Factory).toHaveBeenCalledWith(renderer.$("p#first")[0], "attribute-one");
          return expect(Traction.Bindings.Factory).toHaveBeenCalledWith(renderer.$("p#second")[0], "attribute-two");
        });
        it("creates multiple bindings for a single tag", function() {
          var renderer;
          renderer = rendererWithContent("<p data-bind='attribute-one attribute-two'></p>");
          renderer.call({
            bindTo: this.model
          });
          expect(Traction.Bindings.Factory).toHaveBeenCalledWith(renderer.$("p")[0], "attribute-one");
          return expect(Traction.Bindings.Factory).toHaveBeenCalledWith(renderer.$("p")[0], "attribute-two");
        });
        return it("binds the factoried binding to the bindTo option", function() {
          var renderer;
          spyOn(this.binding, "bindTo");
          renderer = rendererWithContent("<p data-bind='attribute'></p>");
          renderer.call({
            bindTo: this.model
          });
          return expect(this.binding.bindTo).toHaveBeenCalledWith(this.model);
        });
      });
      return describe("outletting", function() {
        it("outlets all children els", function() {
          var children, renderer;
          renderer = rendererWithContent("<script data-outlet=''></script>");
          children = {
            els: function() {
              return ["<p>child content</p>"];
            }
          };
          renderer.call({
            children: children
          });
          return expect(renderer.el.innerHTML).toEqual("<p>child content</p>");
        });
        return it("can outlet specific children", function() {
          var child1, child2, children, renderer;
          renderer = rendererWithContent("<script data-outlet='child1'></script>\n<span><script data-outlet='child2'></script></span>");
          child1 = {
            el: "<p>Child 1 Content</p>"
          };
          child2 = {
            el: "<p>Child 2 Content</p>"
          };
          children = {
            get: function(name) {
              return {
                child1: child1,
                child2: child2
              }[name];
            }
          };
          renderer.call({
            children: children
          });
          return expect(renderer.el.innerHTML).toEqual("<p>Child 1 Content</p>\n<span><p>Child 2 Content</p></span>");
        });
      });
    });
  });

}).call(this);
