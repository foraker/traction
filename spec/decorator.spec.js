// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe("Traction.Decorator", function() {
    var TestDecorator, TestObject, _ref;
    TestObject = (function() {
      function TestObject(state) {
        this.state = state;
      }

      TestObject.prototype.method = function() {
        return "Data";
      };

      TestObject.prototype.getState = function() {
        return this.state;
      };

      TestObject.prototype.overridden = function() {
        return "Original";
      };

      return TestObject;

    })();
    TestDecorator = (function(_super) {
      __extends(TestDecorator, _super);

      function TestDecorator() {
        _ref = TestDecorator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TestDecorator.prototype.computedAttributes = {
        fullName: function() {
          return [this.get("firstName"), this.get("lastName")].join(" ");
        }
      };

      TestDecorator.prototype.overridden = function() {
        return "Overridden";
      };

      return TestDecorator;

    })(Traction.Decorator);
    beforeEach(function() {
      var decorated;
      decorated = new TestObject("test_state");
      return this.decorator = new TestDecorator(decorated);
    });
    it("proxies methods back to the decorated instance", function() {
      return expect(this.decorator.method()).toBe("Data");
    });
    it("proxies state", function() {
      return expect(this.decorator.getState()).toBe("test_state");
    });
    it("overrides methods", function() {
      return expect(this.decorator.overridden()).toBe("Overridden");
    });
    return describe("computed attributes", function() {
      beforeEach(function() {
        var model;
        model = new Backbone.Model({
          firstName: "first",
          lastName: "last"
        });
        return this.decorator = new TestDecorator(model);
      });
      it("should accurately compute the property", function() {
        return expect(this.decorator.get("fullName")).toBe("first last");
      });
      it("updates the when a dependency changes", function() {
        this.decorator.set({
          firstName: "updated first name"
        });
        return expect(this.decorator.get("fullName")).toBe("updated first name last");
      });
      return it("emits change events", function() {
        var spy;
        spy = jasmine.createSpy();
        this.decorator.on("change:fullName", spy);
        this.decorator.set({
          firstName: "updated first name"
        });
        return expect(spy).toHaveBeenCalled();
      });
    });
  });

}).call(this);
