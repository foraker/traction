// Generated by CoffeeScript 1.8.0
(function() {
  describe("Traction.Forms.Select", function() {
    var createInstance;
    createInstance = function(options) {
      var defaults;
      defaults = {
        attribute: "first_name",
        name: "first_name_input",
        label: "First name",
        options: {
          "Jobin label": "Jobin",
          "Crenst label": "Crenst"
        },
        model: new Backbone.Model()
      };
      return new Traction.Forms.Select(_.extend(defaults, options));
    };
    describe("shared behavior", function() {
      return jasmine.itShouldBehaveLike("a field", {
        createInstance: createInstance,
        input: "select"
      });
    });
    describe("#render", function() {
      it("creates an options with the correct label", function() {
        var field;
        field = createInstance({
          options: {
            "Label": "value"
          }
        }).render();
        return expect(field.$("option").html()).toBe("Label");
      });
      it("creates an options with the correct value", function() {
        var field;
        field = createInstance({
          options: {
            "Label": "value"
          }
        }).render();
        return expect(field.$("option").attr("value")).toBe("value");
      });
      it("creates a blank option with the correct label", function() {
        var field;
        field = createInstance({
          includeBlank: "Blank Label"
        }).render();
        return expect(field.$("option:first").html()).toBe("Blank Label");
      });
      it("creates a blank option with the correct value", function() {
        var field;
        field = createInstance({
          includeBlank: "Blank Label"
        }).render();
        return expect(field.$("option:first").attr("value")).toEqual("");
      });
      it("is not a multiselect field", function() {
        var field;
        field = createInstance().render();
        return expect(field.$("select")[0].hasAttribute("multiple")).toEqual(false);
      });
      return describe("the multiselect option is passed", function() {
        return it("is a multiselect field", function() {
          var field;
          field = createInstance({
            multiselect: true
          }).render();
          return expect(field.$("select")[0].hasAttribute("multiple")).toEqual(true);
        });
      });
    });
    return describe("#clear", function() {
      return it("selects the first value", function() {
        var field;
        field = createInstance().render();
        field.set("Crenst");
        field.clear();
        return expect(field.$("option:first").is(":selected")).toBe(true);
      });
    });
  });

}).call(this);
