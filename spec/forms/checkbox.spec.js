// Generated by CoffeeScript 1.3.3
(function() {

  describe("Traction.Forms.Checkbox", function() {
    var createInstance;
    createInstance = function(options) {
      var defaults;
      defaults = {
        attribute: "active",
        label: "Active",
        name: "active_input",
        model: new Backbone.Model()
      };
      return new Traction.Forms.Checkbox(_.extend(defaults, options));
    };
    describe("#render", function() {
      it("removes existing content", function() {
        var field;
        field = createInstance();
        field.$el.append("existing content");
        field.render();
        return expect(field.el.innerHTML).not.toContain("existing content");
      });
      it("renders a label", function() {
        var field, label;
        field = createInstance().render();
        label = field.$("label").html().replace(/\n/g, "").trim();
        return expect(label).toBe("Active");
      });
      it("renders an input with the correct name", function() {
        var field;
        field = createInstance();
        field.render();
        return expect(field.$("input").attr("name")).toBe("active_input");
      });
      it("initializes the input content", function() {
        var field, model;
        model = new Backbone.Model({
          active: true
        });
        field = createInstance({
          model: model
        }).render();
        return expect(field.get()).toBe(true);
      });
      return describe("a required input", function() {
        it("designates the element as required", function() {
          var field;
          field = createInstance({
            required: true
          }).render();
          return expect(field.$el.attr("class")).toContain("required");
        });
        return it("renders an asterisk in the label", function() {
          var field, label;
          field = createInstance({
            required: true
          }).render();
          label = field.$("label").html().replace(/\n/g, "").trim();
          return expect(label).toBe("<i>*</i> Active");
        });
      });
    });
    describe("#renderErrors", function() {
      it("adds a class of 'errors'", function() {
        var field;
        field = createInstance().render();
        field.renderErrors([]);
        return expect(field.$el.attr("class")).toContain("error");
      });
      it("appends error messages", function() {
        var field;
        field = createInstance().render();
        field.renderErrors(["error 1", "error 2"]);
        return expect(field.$(".inline-errors").text()).toBe("error 1, error 2");
      });
      return it("appends a single error message", function() {
        var field;
        field = createInstance().render();
        field.renderErrors(["error 1"]);
        return expect(field.$(".inline-errors").text()).toBe("error 1");
      });
    });
    describe("#disable", function() {
      return it("adds the disabled attribute", function() {
        var field;
        field = createInstance().render();
        field.disable();
        return expect(field.$("input").attr("disabled")).toBe("disabled");
      });
    });
    describe("#enable", function() {
      return it("removes the disabled attribute", function() {
        var field;
        field = createInstance().render();
        field.disable();
        field.enable();
        return expect(field.$("input").attr("disabled")).toBeUndefined();
      });
    });
    describe("#get", function() {
      it("returns true when the checkbox is checked", function() {
        var field;
        field = createInstance().render();
        field.$("input").prop("checked", true);
        return expect(field.get()).toBe(true);
      });
      it("allows the checked value to be specified", function() {
        var field;
        field = createInstance({
          checkedValue: "isTrue"
        }).render();
        field.$("input").prop("checked", true);
        return expect(field.get()).toBe("isTrue");
      });
      it("returns null when the checkbox is checked", function() {
        var field;
        field = createInstance().render();
        field.$("input").prop("checked", false);
        return expect(field.get()).toBe(null);
      });
      return it("allows the unchecked value to be specified", function() {
        var field;
        field = createInstance({
          uncheckedValue: "isFalse"
        }).render();
        field.$("input").prop("checked", false);
        return expect(field.get()).toBe("isFalse");
      });
    });
    describe("#set", function() {
      it("checks the checkbox if the specified value is true", function() {
        var field;
        field = createInstance().render();
        field.set(true);
        return expect(field.$("input").prop("checked")).toBe(true);
      });
      it("does not check the checkbox if the specied value is not true", function() {
        var field;
        field = createInstance().render();
        field.set(false);
        return expect(field.$("input").prop("checked")).toBe(false);
      });
      it("checks the checkbox if the specified value is matches the specified checkedValue", function() {
        var field;
        field = createInstance({
          checkedValue: "isTrue"
        }).render();
        field.set("isTrue");
        return expect(field.$("input").prop("checked")).toBe(true);
      });
      it("does not check the checkbox if the specified value is matches the specified checkedValue", function() {
        var field;
        field = createInstance({
          checkedValue: "isTrue"
        }).render();
        field.set("isFalse");
        return expect(field.$("input").prop("checked")).toBe(false);
      });
      it("allows the specified of an 'checkedTest' ", function() {
        var checkedTest, field;
        checkedTest = function(val) {
          return val === true || val === "isTrue";
        };
        field = createInstance({
          checkedTest: checkedTest
        }).render();
        field.set("isTrue");
        return expect(field.$("input").prop("checked")).toBe(true);
      });
      return it("does not check the checkbox if the checkedTest fails", function() {
        var checkedTest, field;
        checkedTest = function(val) {
          return val === true || val === "isTrue";
        };
        field = createInstance({
          checkedTest: checkedTest
        }).render();
        field.set("isFalse");
        return expect(field.$("input").prop("checked")).toBe(false);
      });
    });
    describe("#clear", function() {
      it("unchecks the checkbox", function() {
        var field;
        field = createInstance().render();
        field.$("input").prop("checked", true);
        field.clear();
        return expect(field.$("input").prop("checked")).toBe(false);
      });
      return it("clears errors", function() {
        var field;
        field = createInstance().render();
        field.renderErrors(["error"]);
        field.clear();
        return expect(field.$(".inline-errors").text()).not.toContain("error");
      });
    });
    describe("#reset", function() {
      return it("updates the input to reflect the model", function() {
        var field, model;
        model = new Backbone.Model({
          active: true
        });
        field = createInstance({
          model: model
        }).render();
        model.set({
          active: false
        }, {
          silent: true
        });
        field.reset();
        return expect(field.get()).toBe(null);
      });
    });
    describe("#commit", function() {
      return it("applies the input value to the model", function() {
        var field, model;
        model = new Backbone.Model({
          active: false
        });
        field = createInstance({
          model: model
        }).render();
        field.set(true);
        field.commit();
        return expect(model.get("active")).toBe(true);
      });
    });
    return describe("model syncing", function() {
      it("syncs the input with the model", function() {
        var field, model;
        model = new Backbone.Model({
          active: true
        });
        field = createInstance({
          model: model
        }).render();
        model.set({
          active: null
        });
        return expect(field.get()).toBe(null);
      });
      it("commits input changes back to the model", function() {
        var field, model;
        model = new Backbone.Model({
          active: false
        });
        field = createInstance({
          model: model
        }).render();
        field.set(true);
        field.$("input").trigger("change");
        return expect(model.get("active")).toBe(true);
      });
      return it("does not commit changes when autocommit is disabled", function() {
        var field, model;
        model = new Backbone.Model({
          active: false
        });
        field = createInstance({
          model: model,
          autoCommit: false
        }).render();
        field.set(true);
        field.$("input").trigger("change");
        return expect(model.get("active")).toBe(false);
      });
    });
  });

}).call(this);
