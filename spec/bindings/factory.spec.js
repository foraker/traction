// Generated by CoffeeScript 1.8.0
(function() {
  describe("binding factory", function() {
    describe("when a colon is present in the specification", function() {
      var attributeBinding, element;
      attributeBinding = {};
      element = {};
      beforeEach(function() {
        return spyOn(Traction.Bindings, "AttributeBinding").andReturn(attributeBinding);
      });
      it("instantiates an attribute binding", function() {
        Traction.Bindings.Factory(element, "attribute:value");
        return expect(Traction.Bindings.AttributeBinding).toHaveBeenCalledWith(element, "attribute:value");
      });
      return it("returns the attribute binding", function() {
        return expect(Traction.Bindings.Factory(element, "attribute:value")).toBe(attributeBinding);
      });
    });
    describe("when a pipe is present in the specification", function() {
      var element, formatBinding;
      formatBinding = {};
      element = {};
      beforeEach(function() {
        return spyOn(Traction.Bindings, "FormattedContentBinding").andReturn(formatBinding);
      });
      it("instantiates an formatted content binding", function() {
        Traction.Bindings.Factory(element, "attribute|formatter");
        return expect(Traction.Bindings.FormattedContentBinding).toHaveBeenCalledWith(element, "attribute|formatter");
      });
      return it("returns the formatted content binding", function() {
        return expect(Traction.Bindings.Factory(element, "attribute|formatter")).toBe(formatBinding);
      });
    });
    return describe("when specification is just an attribute", function() {
      var element, propertyBinding;
      propertyBinding = {};
      element = {};
      beforeEach(function() {
        return spyOn(Traction.Bindings, "ContentBinding").andReturn(propertyBinding);
      });
      it("instantiates an content binding", function() {
        Traction.Bindings.Factory(element, "attribute");
        return expect(Traction.Bindings.ContentBinding).toHaveBeenCalledWith(element, "attribute");
      });
      return it("returns the content binding", function() {
        return expect(Traction.Bindings.Factory(element, "attribute")).toBe(propertyBinding);
      });
    });
  });

}).call(this);
