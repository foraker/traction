// Generated by CoffeeScript 1.9.3
(function() {
  describe("formatted content binding", function() {
    jasmine.itShouldBehaveLike("a binding", {
      describedClass: Traction.Bindings.FormattedContentBinding
    });
    return describe("#bindTo", function() {
      var createBinding, element, model;
      element = $("<p></p>")[0];
      model = new Backbone.Model({
        name: "Original Name"
      });
      beforeEach(function() {
        this.originalHelpers = Traction.TemplateHelpers.Formatting;
        return Traction.TemplateHelpers.Formatting = {
          downcase: function(string) {
            return string.toLowerCase();
          },
          append: function(string, appended) {
            return string + appended;
          }
        };
      });
      createBinding = function(specification) {
        return new Traction.Bindings.FormattedContentBinding(element, specification).bindTo(model);
      };
      it("sets the content of element as the formatted attribute", function() {
        createBinding("name|downcase");
        return expect(element.innerHTML).toBe("original name");
      });
      it("passes arguments to formatters", function() {
        createBinding("name|append:zzz");
        return expect(element.innerHTML).toBe("Original Namezzz");
      });
      it("chains formatters", function() {
        createBinding("name|downcase|append:zzz");
        return expect(element.innerHTML).toBe("original namezzz");
      });
      it("updates the content of the element when the property changes", function() {
        createBinding("name|downcase");
        model.set("name", "Updated Name");
        return expect(element.innerHTML).toBe("updated name");
      });
      return afterEach(function() {
        return Traction.TemplateHelpers.Formatting = this.originalHelpers;
      });
    });
  });

}).call(this);
