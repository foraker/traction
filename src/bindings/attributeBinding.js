// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Traction.Bindings.AttributeBinding = (function(superClass) {
    extend(AttributeBinding, superClass);

    function AttributeBinding(el, specification) {
      var ref;
      this.el = el;
      this.specification = specification;
      ref = this.specification.split(":"), this.attribute = ref[0], this.property = ref[1], this.trueValue = ref[2], this.falseValue = ref[3];
    }

    AttributeBinding.prototype.update = function(options) {
      if (this._hasBooleanSpecification()) {
        return this._booleanUpdate();
      } else {
        return this._directUpdate();
      }
    };

    AttributeBinding.prototype._hasBooleanSpecification = function() {
      return this.trueValue != null;
    };

    AttributeBinding.prototype._booleanUpdate = function() {
      if (this._currentValue()) {
        this._addValueToAttribute(this.trueValue);
        if (this.falseValue) {
          return this._removeValueFromAttribute(this.falseValue);
        }
      } else {
        this._removeValueFromAttribute(this.trueValue);
        if (this.falseValue) {
          return this._addValueToAttribute(this.falseValue);
        }
      }
    };

    AttributeBinding.prototype._directUpdate = function() {
      this._removeValueFromAttribute(this.previousValue);
      this._addValueToAttribute(this._currentValue());
      return this.previousValue = this._currentValue();
    };

    AttributeBinding.prototype._addValueToAttribute = function(value) {
      return this._setAttribute(_.union(this._existingValues(), [value]));
    };

    AttributeBinding.prototype._removeValueFromAttribute = function(value) {
      return this._setAttribute(_.without(this._existingValues(), value));
    };

    AttributeBinding.prototype._existingValues = function() {
      return ($(this.el).attr(this.attribute) || "").split(" ");
    };

    AttributeBinding.prototype._setAttribute = function(values) {
      return $(this.el).attr(this.attribute, _.string.clean(values.join(" ")));
    };

    AttributeBinding.prototype._currentValue = function() {
      return this.model.get(this.property);
    };

    return AttributeBinding;

  })(Traction.Bindings.Binding);

}).call(this);
