// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Traction.Rails.Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.associations = {};

    Model.prototype.initialize = function() {
      if (!this._isBaseClass()) {
        this.paramRoot || (this.paramRoot = this._inferParamRoot());
      }
      return this.on("error", this.parseErrors, this);
    };

    Model.prototype.set = function(key, value, options) {
      var associationName, klass, newAttributes, urlRoot, _ref;
      if (typeof key !== "object") {
        newAttributes = {};
        newAttributes[key] = value;
      } else {
        newAttributes = key;
      }
      _ref = this.associations;
      for (associationName in _ref) {
        klass = _ref[associationName];
        if (this.get(associationName)) {
          if (!(associationName in newAttributes)) {
            continue;
          }
          this._updateExistingAssociation(associationName, klass, newAttributes[associationName]);
        } else {
          this._createNewAssociation(associationName, klass, newAttributes[associationName]);
        }
        delete newAttributes[associationName];
        if (urlRoot = newAttributes["" + associationName + "_url"]) {
          this.get(associationName).url = urlRoot;
        }
      }
      return Model.__super__.set.call(this, newAttributes, options);
    };

    Model.prototype.parseErrors = function(self, response) {
      var _ref;
      return this.errors = (_ref = $.parseJSON(response.responseText)) != null ? _ref.errors : void 0;
    };

    Model.prototype.toggle = function(attribute) {
      return this.set(attribute, !this.get(attribute));
    };

    Model.prototype.url = function() {
      return this.get("url") || Model.__super__.url.apply(this, arguments);
    };

    Model.prototype.toJSON = function() {
      var attribute, json, _i, _len, _ref;
      if (this.persists) {
        json = {};
        _ref = this.persists;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attribute = _ref[_i];
          json[attribute] = this.get(attribute);
        }
        return json;
      } else {
        return Model.__super__.toJSON.apply(this, arguments);
      }
    };

    Model.prototype._inferParamRoot = function() {
      return _.string.underscored(this._className());
    };

    Model.prototype._className = function() {
      return this.constructor.toString().match(/function\s(.*?)\(/)[1].toString();
    };

    Model.prototype._isBaseClass = function() {
      return this.constructor === Traction.Rails.Model;
    };

    Model.prototype._updateExistingAssociation = function(associationName, klass, associated) {
      var _base, _base1;
      if (associated instanceof klass || _.isUndefined(associated)) {
        return this.attributes[associationName] = associated;
      } else {
        if (typeof (_base = this.get(associationName)).reset === "function") {
          _base.reset(associated);
        }
        return typeof (_base1 = this.get(associationName)).set === "function" ? _base1.set(associated) : void 0;
      }
    };

    Model.prototype._createNewAssociation = function(associationName, klass, associated) {
      if (associated instanceof klass) {
        return this.attributes[associationName] = associated;
      } else {
        return this.attributes[associationName] = new klass(associated);
      }
    };

    return Model;

  })(Backbone.Model);

}).call(this);
