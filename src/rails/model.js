// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Traction.Rails.Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.initialize = function() {
      if (!this._isBaseClass()) {
        this.paramRoot || (this.paramRoot = this._inferParamRoot());
      }
      return this.on("error", this.parseErrors, this);
    };

    Model.prototype.parseErrors = function(self, response) {
      var _ref;
      return this.errors = (_ref = $.parseJSON(response.responseText)) != null ? _ref.errors : void 0;
    };

    Model.prototype.patch = function() {
      var attrs;
      if (this.paramRoot) {
        attrs = {};
        attrs[this.paramRoot] = this.changedAttributes();
      } else {
        attrs = this.changedAttributes();
      }
      return this.sync('update', this, {
        attrs: attrs
      });
    };

    Model.prototype.toJSON = function() {
      var attribute, json, _i, _len, _ref;
      if (this.persists) {
        json = {};
        _ref = this.persists;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attribute = _ref[_i];
          json[attribute] = this.get(attribute);
        }
        return json;
      } else {
        return Model.__super__.toJSON.apply(this, arguments);
      }
    };

    Model.prototype._inferParamRoot = function() {
      return _.string.underscored(this._className());
    };

    Model.prototype._className = function() {
      return this.constructor.toString().match(/function\s(.*?)\(/)[1].toString();
    };

    Model.prototype._isBaseClass = function() {
      return this.constructor === Traction.Rails.Model;
    };

    return Model;

  })(Traction.Model);

}).call(this);
