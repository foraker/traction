// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Traction.Rails.Model = (function(superClass) {
    extend(Model, superClass);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.initialize = function() {
      if (!this._isBaseClass()) {
        this.paramRoot || (this.paramRoot = this._inferParamRoot());
      }
      return this.on("error", this.parseErrors, this);
    };

    Model.prototype.parseErrors = function(self, response) {
      var ref;
      return this.errors = (ref = $.parseJSON(response.responseText)) != null ? ref.errors : void 0;
    };

    Model.prototype.patch = function() {
      var attrs;
      if (this.paramRoot) {
        attrs = {};
        attrs[this.paramRoot] = this.changedAttributes();
      } else {
        attrs = this.changedAttributes();
      }
      return this.sync('update', this, {
        attrs: attrs
      });
    };

    Model.prototype.toJSON = function() {
      var attribute, i, json, len, ref;
      if (this.persists) {
        json = {};
        ref = this.persists;
        for (i = 0, len = ref.length; i < len; i++) {
          attribute = ref[i];
          json[attribute] = this.get(attribute);
        }
        return json;
      } else {
        return Model.__super__.toJSON.apply(this, arguments);
      }
    };

    Model.prototype._inferParamRoot = function() {
      return _.string.underscored(this._className());
    };

    Model.prototype._className = function() {
      return this.constructor.toString().match(/function\s(.*?)\(/)[1].toString();
    };

    Model.prototype._isBaseClass = function() {
      return this.constructor === Traction.Rails.Model;
    };

    return Model;

  })(Traction.Model);

}).call(this);
