// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Traction.View = (function(_super) {

    __extends(View, _super);

    function View(options) {
      this.children = new Traction.ViewCollection();
      View.__super__.constructor.apply(this, arguments);
      this.renderer = this.buildRenderer();
      if (this.decorator) {
        this.model = this.buildDecorator(options.model);
      }
    }

    View.prototype.buildRenderer = function() {
      if (this.template) {
        return new Traction.Rendering.TemplateStrategy({
          template: this.template,
          renderWithin: this.el
        });
      } else if (this.options.el) {
        return new Traction.Rendering.PrerenderedStrategy({
          renderWithin: this.el
        });
      } else {
        return new Traction.Rendering.AppendStrategy({
          renderWithin: this.el
        });
      }
    };

    View.prototype.buildDecorator = function(model) {
      var klass;
      if (_.isFunction(this.decorator)) {
        return new this.decorator(model);
      } else {
        klass = Traction.Decorator.extend(this.decorator);
        return new klass(model);
      }
    };

    View.prototype.proxyEvent = function(target, event, newEvent) {
      var callback,
        _this = this;
      callback = function() {
        var args;
        args = Array.prototype.slice.call(arguments);
        args.unshift(newEvent || event);
        return _this.trigger.apply(_this, args);
      };
      return this.listenTo(target, event, callback);
    };

    View.prototype.render = function() {
      this.children.render();
      this.renderer.call({
        bindTo: this.model,
        children: this.children
      });
      return this;
    };

    View.prototype.remove = function() {
      var _base;
      View.__super__.remove.apply(this, arguments);
      if (typeof (_base = this.renderer).destroy === "function") {
        _base.destroy();
      }
      return this.children.each(function(child) {
        return child.remove();
      });
    };

    return View;

  })(Backbone.View);

  Traction.View.mixin = function(object) {
    return _.extend(this.prototype, object);
  };

  Traction.View["extends"] = function(klass) {
    return this.mixin(klass.prototype);
  };

}).call(this);
