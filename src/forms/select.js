// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Traction.Forms.Select = (function(_super) {

    __extends(Select, _super);

    function Select() {
      return Select.__super__.constructor.apply(this, arguments);
    }

    Select.prototype.labelTemplate = _.template("<label for=\"<%= options.id %>\">\n  <% if(options.required) { %><i>*</i><% } %> <%= options.label %>\n</label>");

    Select.prototype.inputTemplate = _.template("<select id=\"input-<%= options.id %>\" name=\"<%= options.name %>\">\n  <% if(options.includeBlank) { %><option><%= options.includeBlank %></option><% } %>\n  <% _.each(options.options, function(value, label){ %>\n    <option value=\"<%= value %>\"><%= label %></option>\n  <% }) %>\n</select>");

    Select.prototype.events = {
      "change select": "applyAutoCommit"
    };

    Select.prototype.clear = function() {
      this._input().val(this._firstOptionValue());
      return this.clearErrors();
    };

    Select.prototype._firstOptionValue = function() {
      return this.$("option:first").attr("value");
    };

    Select.prototype._input = function() {
      return this.input || (this.input = this.$("select"));
    };

    Select.prototype._renderInput = function() {
      return this.$el.append(this.inputTemplate({
        options: this.options
      }));
    };

    return Select;

  })(Traction.Forms.Field);

}).call(this);
