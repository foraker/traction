// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Traction.Rendering.NodeStrategy = (function(_super) {

    __extends(NodeStrategy, _super);

    NodeStrategy.prototype.events = {
      "click [data-emit]:not(form)": "_emit",
      "submit form[data-emit]": "_emit"
    };

    function NodeStrategy() {
      NodeStrategy.__super__.constructor.apply(this, arguments);
      this.bindings = [];
    }

    NodeStrategy.prototype.destroy = function() {
      return _.each(this.bindings, function(binding) {
        return binding.destroy();
      });
    };

    NodeStrategy.prototype._outlet = function(children) {
      var _this = this;
      return this.$("script[data-outlet]").each(function(index, el) {
        var name;
        if (name = $(el).data("outlet")) {
          return $(el).replaceWith(children.get(name).el);
        } else {
          return $(el).replaceWith(children.els());
        }
      });
    };

    NodeStrategy.prototype._applyBindings = function(binding) {
      var existingBinding, _i, _len, _ref,
        _this = this;
      _ref = this.bindings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        existingBinding = _ref[_i];
        existingBinding.destroy();
      }
      return this.$("[data-bind]").each(function(index, el) {
        var specification, _j, _len1, _ref1, _results;
        _ref1 = $(el).data("bind").split(" ");
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          specification = _ref1[_j];
          _results.push(_this.bindings.push(Traction.Bindings.Factory(el, specification).bindTo(binding)));
        }
        return _results;
      });
    };

    NodeStrategy.prototype._emit = function(event) {
      var eventName, eventNames, _i, _len, _results;
      eventNames = event.currentTarget.getAttribute("data-emit").split(" ");
      _results = [];
      for (_i = 0, _len = eventNames.length; _i < _len; _i++) {
        eventName = eventNames[_i];
        _results.push(this.$el.trigger(eventName));
      }
      return _results;
    };

    return NodeStrategy;

  })(Backbone.View);

}).call(this);
